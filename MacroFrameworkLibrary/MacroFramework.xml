<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MacroFramework</name>
    </assembly>
    <members>
        <member name="T:MacroFramework.Commands.BindActivator">
            <summary>
            <see cref="T:MacroFramework.Commands.CommandActivator"/> instance for keybind callbacks
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.BindActivator.Bind">
            <summary>
            The bind to use
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.BindActivator.#ctor(MacroFramework.Commands.Bind)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.BindActivator"/> instance
            </summary>
            <param name="bind">The bind to use</param>
        </member>
        <member name="M:MacroFramework.Commands.BindActivator.#ctor(MacroFramework.Commands.Bind,MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.BindActivator"/> instance
            </summary>
            <param name="bind">The bind to use</param>
            <param name="callback">The callback to use</param>
        </member>
        <member name="M:MacroFramework.Commands.BindActivator.SetCallback(MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Sets the callback for this activator
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="T:MacroFramework.Commands.BindHoldActivator">
            <summary>
            <see cref="T:MacroFramework.Commands.CommandActivator"/> instance for keybind hold callbacks. Provides more detailed events than a regular <see cref="T:MacroFramework.Commands.BindActivator"/>
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.BindHoldActivator.Bind">
            <summary>
            The bind to use
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.BindHoldActivator.OnActivate">
            <summary>
            Called when the <see cref="P:MacroFramework.Commands.BindHoldActivator.Bind"/> becomes active. Called before <see cref="P:MacroFramework.Commands.BindHoldActivator.OnUpdate"/> and <see cref="P:MacroFramework.Commands.BindHoldActivator.OnDeactivate"/>.
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.BindHoldActivator.OnUpdate">
            <summary>
            Called on each main loop iteration for as long as the <see cref="P:MacroFramework.Commands.BindHoldActivator.Bind"/> stays active. Called after <see cref="P:MacroFramework.Commands.BindHoldActivator.OnActivate"/> and before <see cref="P:MacroFramework.Commands.BindHoldActivator.OnDeactivate"/>.
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.BindHoldActivator.OnDeactivate">
            <summary>
            Called when the <see cref="P:MacroFramework.Commands.BindHoldActivator.Bind"/> becomes inactive. Called after <see cref="P:MacroFramework.Commands.BindHoldActivator.OnActivate"/> and <see cref="P:MacroFramework.Commands.BindHoldActivator.OnUpdate"/>.
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.BindHoldActivator.#ctor(MacroFramework.Commands.Bind)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.BindHoldActivator"/> instance
            </summary>
            <param name="bind">The bind to use</param>
        </member>
        <member name="M:MacroFramework.Commands.BindHoldActivator.#ctor(MacroFramework.Commands.Bind,MacroFramework.Commands.Command.CommandCallback,MacroFramework.Commands.Command.CommandCallback,MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.BindHoldActivator"/> instance
            </summary>
            <param name="bind">The bind to use</param>
            <param name="onActivate"><see cref="P:MacroFramework.Commands.BindHoldActivator.OnActivate"/></param>
            <param name="onUpdate"><see cref="P:MacroFramework.Commands.BindHoldActivator.OnUpdate"/></param>
            <param name="onDeactivate"><see cref="P:MacroFramework.Commands.BindHoldActivator.OnDeactivate"/></param>
        </member>
        <member name="M:MacroFramework.Commands.BindHoldActivator.SetOnActivate(MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Sets the <see cref="P:MacroFramework.Commands.BindHoldActivator.OnActivate"/>
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="M:MacroFramework.Commands.BindHoldActivator.SetOnUpdate(MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Sets the <see cref="P:MacroFramework.Commands.BindHoldActivator.OnUpdate"/>
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="M:MacroFramework.Commands.BindHoldActivator.SetOnDeactivate(MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Sets the <see cref="P:MacroFramework.Commands.BindHoldActivator.OnDeactivate"/>
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="T:MacroFramework.Commands.KeyActivator">
            <summary>
            <see cref="T:MacroFramework.Commands.CommandActivator"/> instance for key event callbacks
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.KeyActivator.InputEventCallback">
            <summary>
            The delegate for a key event callback
            </summary>
            <param name="k"></param>
        </member>
        <member name="T:MacroFramework.Commands.KeyActivator.KeyEventCallback">
            <summary>
            The delegate for a key event callback. Auto casts an <see cref="T:MacroFramework.Commands.IInputEvent"/> to a <see cref="T:MacroFramework.Input.KeyEvent"/>
            </summary>
            <param name="k"></param>
        </member>
        <member name="T:MacroFramework.Commands.KeyActivator.MouseEventCallback">
            <summary>
            The delegate for a key event callback. Auto casts an <see cref="T:MacroFramework.Commands.IInputEvent"/> to a <see cref="T:MacroFramework.Input.MouseEvent"/>
            </summary>
            <param name="k"></param>
        </member>
        <member name="T:MacroFramework.Commands.KeyActivator.InputFilter">
            <summary>
            Filter to use with the activator
            </summary>
            <param name="e">Incoming input event</param>
        </member>
        <member name="M:MacroFramework.Commands.KeyActivator.#ctor(MacroFramework.Commands.KKey,MacroFramework.Commands.KeyActivator.InputEventCallback)">
            <summary>
            Creates a <see cref="T:MacroFramework.Commands.KeyActivator"/> instance
            </summary>
            <param name="key">The key for which you wish to receive callbacks on</param>
            <param name="callback">The key event callback</param>
        </member>
        <member name="M:MacroFramework.Commands.KeyActivator.#ctor(MacroFramework.Commands.KeyActivator.InputFilter,MacroFramework.Commands.KeyActivator.InputEventCallback)">
            <summary>
            Creates a <see cref="T:MacroFramework.Commands.KeyActivator"/> instance
            </summary>
            <param name="keyFilter">The keys for which you wish to receive callbacks on</param>
            <param name="callback">The key event callback</param>
        </member>
        <member name="M:MacroFramework.Commands.KeyActivator.#ctor(MacroFramework.Commands.KKey)">
            <summary>
            Creates a <see cref="T:MacroFramework.Commands.KeyActivator"/> instance
            </summary>
            <param name="key">The key for which you wish to receive callbacks on</param>
        </member>
        <member name="M:MacroFramework.Commands.KeyActivator.#ctor(MacroFramework.Commands.KeyActivator.InputFilter)">
            <summary>
            Creates a <see cref="T:MacroFramework.Commands.KeyActivator"/> instance
            </summary>
            <param name="keyFilter">The keys for which you wish to receive callbacks on</param>
        </member>
        <member name="M:MacroFramework.Commands.KeyActivator.SetCallback(MacroFramework.Commands.KeyActivator.InputEventCallback)">
            <summary>
            Sets the callback for this activator
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="T:MacroFramework.Commands.RepeatActivator">
            <summary>
            <see cref="T:MacroFramework.Commands.CommandActivator"/> instance for repeating activators (e.g. double click). Requires that you set <see cref="F:MacroFramework.MacroSettings.MainLoopTimestep"/> low enough.
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.RepeatActivator.RepeatInterval">
            <summary>
            The interval in milliseconds deciding how quickly the activator should be active again. Default = 400ms
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.RepeatActivator.RepeatCount">
            <summary>
            The amount of times the activator should be activated. Default = 2
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.RepeatActivator.DisallowExtraRepeats">
            <summary>
            If true, the repeat activator is activated if the repeat count is exactly <see cref="P:MacroFramework.Commands.RepeatActivator.RepeatCount"/>. Default = true
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.RepeatActivator.ActivateImmediately">
            <summary>
            Whether to activate the activator immediately or wait until <see cref="P:MacroFramework.Commands.RepeatActivator.RepeatInterval"/> expires. Default = false
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.RepeatActivator.OnEachActivate">
            <summary>
            This delegate is called each time the associated activator activates
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.RepeatActivator.#ctor(MacroFramework.Commands.IActivator,MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.RepeatActivator"/> instance
            </summary>
            <param name="activator">The activator to use</param>
            <param name="callback">The callback to execute</param>
        </member>
        <member name="M:MacroFramework.Commands.RepeatActivator.SetCallback(MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Sets the callback for this activator
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="T:MacroFramework.Commands.TextActivator">
            <summary>
            <see cref="T:MacroFramework.Commands.CommandActivator"/> instance for text command callbacks
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.TextActivator.TextCommandCallback">
            <summary>
            Callback for text commands
            </summary>
            <param name="command">The command which is being executed</param>
        </member>
        <member name="M:MacroFramework.Commands.TextActivator.#ctor(MacroFramework.Tools.RegexWrapper[],MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.TextActivator"/> instance
            </summary>
            <param name="matchers">Array of <see cref="T:MacroFramework.Tools.RegexWrapper"/> objects which are used to match text commands</param>
            <param name="command">The command callback</param>
        </member>
        <member name="M:MacroFramework.Commands.TextActivator.#ctor(MacroFramework.Tools.RegexWrapper[],MacroFramework.Commands.TextActivator.TextCommandCallback)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.TextActivator"/> instance
            </summary>
            <param name="matchers">Array of <see cref="T:MacroFramework.Tools.RegexWrapper"/> objects which are used to match text commands</param>
            <param name="command">The text command callback</param>
        </member>
        <member name="M:MacroFramework.Commands.TextActivator.#ctor(MacroFramework.Tools.RegexWrapper[])">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.TextActivator"/> instance
            </summary>
            <param name="matchers">Array of <see cref="T:MacroFramework.Tools.RegexWrapper"/> objects which are used to match text commands</param>
        </member>
        <member name="M:MacroFramework.Commands.TextActivator.SetCallback(MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Sets the callback for this activator
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="M:MacroFramework.Commands.TextActivator.SetCallback(MacroFramework.Commands.TextActivator.TextCommandCallback)">
            <summary>
            Sets the callback for this activator
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="T:MacroFramework.Commands.TimerActivator">
            <summary>
            <see cref="T:MacroFramework.Commands.CommandActivator"/> instance for timer based actions
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.TimerActivator.#ctor(System.Int32,MacroFramework.Commands.TimeUnit,System.Boolean,MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.TimerActivator"/> instance
            </summary>
            <param name="command">Callback</param>
            <param name="delay">Minimum delay between the end of last execution and the beginning of a new one. If 0 the callback is called at at every update loop, see <see cref="F:MacroFramework.MacroSettings.MainLoopTimestep"/></param>
            <param name="callAtStart">If true the command is called on the first update loop</param>
            <param name="unit">The unit of time used</param>
        </member>
        <member name="M:MacroFramework.Commands.TimerActivator.SetCallback(MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Sets the callback for this activator
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="M:MacroFramework.Commands.TimerActivator.ToMilliseconds(System.Int64,MacroFramework.Commands.TimeUnit)">
            <summary>
            Converts given time unit to milliseconds
            </summary>
            <param name="time"></param>
            <param name="unit"></param>
            <returns></returns>
        </member>
        <member name="T:MacroFramework.Commands.WrapperActivator">
            <summary>
            <see cref="T:MacroFramework.Commands.CommandActivator"/> instance for wrapping multiple activators
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.WrapperActivator.ActiveActivators">
            <summary>
            The list of active <see cref="T:MacroFramework.Commands.IActivator"/> instances
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.WrapperActivator.#ctor(MacroFramework.Commands.Command.CommandCallback,MacroFramework.Commands.IActivator[])">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.WrapperActivator"/> instance
            </summary>
            <param name="callback">The callback to use</param>
            <param name="activators">The <see cref="T:MacroFramework.Commands.IActivator"/> instances to use</param>
        </member>
        <member name="M:MacroFramework.Commands.WrapperActivator.#ctor(MacroFramework.Commands.IActivator[])">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.WrapperActivator"/> instance
            </summary>
            <param name="activators">The <see cref="T:MacroFramework.Commands.IActivator"/> instances to use</param>
        </member>
        <member name="M:MacroFramework.Commands.WrapperActivator.SetCallback(MacroFramework.Commands.Command.CommandCallback)">
            <summary>
            Sets the callback for this activator
            </summary>
            <param name="cb">The callback to use</param>
        </member>
        <member name="T:MacroFramework.Commands.Bind">
            <summary>
            Class used to different types define keyevent combinations
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.Bind.Keys">
            <summary>
            The keys which need to be pressed
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.Bind.Settings">
            <summary>
            The settings to use for this bind
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Bind.#ctor(MacroFramework.Commands.BindSettings,MacroFramework.Commands.KKey[])">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.Bind"/> instance
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Bind.#ctor(MacroFramework.Commands.KKey[])">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.Bind"/> instance
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.BindSettings">
            <summary>
            A settings class used to define the behaviour of a <see cref="T:MacroFramework.Commands.Bind"/>
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.BindSettings.ActivationType">
            <summary>
            The key event activation filter for this activator
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.BindSettings.MatchType">
            <summary>
            The key match filter for this activator
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.BindSettings.Order">
            <summary>
            The key order filter for this activator
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.BindSettings.#ctor(MacroFramework.Commands.ActivationEventType,MacroFramework.Commands.KeyMatchType,MacroFramework.Commands.KeyPressOrder)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.Bind"/> instance
            </summary>
            <param name="activationType">The key event activation filter for this activator</param>
            <param name="matchType">The key match filter for this activator</param>
            <param name="order">The key order filter for this activator</param>
        </member>
        <member name="F:MacroFramework.Commands.BindSettings.Default">
            <summary>
            The default settings for a bind. Sufficient for the majority of binds. Only the defined keys can be pressed and in order. Activated when the last key of the bind is released. 
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.BindSettings.OnFirstReleaseUnordered">
            <summary>
            Only the defined keys can be pressed in any order. Activated when the last key of the bind is released. 
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.BindSettings.OnPress">
            <summary>
            Only the defined keys can be pressed and in order. Activated when the last key of the bind is pressed down.
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.BindSettings.OnPressUnordered">
            <summary>
            Only the defined keys can be pressed and in order. Activated when the last key of the bind is pressed down.
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.CommandActivator">
            <summary>
            The base class for all included activators. Inherit this class or implement <see cref="T:MacroFramework.Commands.IActivator"/> for custom functionality.
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.CommandActivator.IgnoreOwnerActiveStatus">
            <summary>
            If true, the active status of the owner (<see cref="F:MacroFramework.Commands.Command.IsActive"/>) is ignored
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.CommandActivator.CommandCallback">
            <summary>
            The current callback of this activator
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivator.#ctor(MacroFramework.Commands.Command.CommandCallback,System.Boolean)">
            <summary>
            Initializes this activator with a callback
            </summary>
            <param name="command">The callback to be called when this activator becomes active</param>
            <param name="ignoreOwnerContext"><see cref="P:MacroFramework.Commands.CommandActivator.IgnoreOwnerActiveStatus"/></param>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivator.IsActive">
            <summary>
            Returns true if the activator is active. Also takes into account the context of the owner: <see cref="F:MacroFramework.Commands.Command.IsActive"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivator.IsActivatorActive">
            <summary>
            Abstract bool for individual activator functionality. Override for custom functionality.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivator.Execute">
            <summary>
            Executes the callback of the activator as well as the <see cref="M:MacroFramework.Commands.Command.OnExecuteStart"/> and <see cref="M:MacroFramework.Commands.Command.OnExecutionComplete"/> methods if <see cref="P:MacroFramework.Commands.CommandActivator.Owner"/> is assigned
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivator.RegisterDynamicActivator(System.Boolean)">
            <summary>
            Wraps this <see cref="T:MacroFramework.Commands.CommandActivator"/> into a <see cref="T:MacroFramework.Commands.DynamicActivator"/> instance and adds it to the list of active activators using <see cref="M:MacroFramework.Commands.CommandContainer.AddDynamicActivator(MacroFramework.Commands.IDynamicActivator)"/>
            </summary>
            <param name="removeAfterFirstActivation">Indicates whether the dynamic activator should be discarded after the first activation</param>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivator.RegisterDynamicActivator(MacroFramework.Commands.DynamicActivator.RemoveAfterExecutionDelegate)">
            <summary>
            Wraps this <see cref="T:MacroFramework.Commands.CommandActivator"/> into a <see cref="T:MacroFramework.Commands.DynamicActivator"/> instance and adds it to the list of active activators using <see cref="M:MacroFramework.Commands.CommandContainer.AddDynamicActivator(MacroFramework.Commands.IDynamicActivator)"/>
            </summary>
            <param name="removeAfterFirstActivation"></param>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivator.WaitForActivation(System.Int32)">
            <summary>
            Asynchronously waits for the <see cref="T:MacroFramework.Commands.IActivator"/> to become active using <see cref="T:MacroFramework.Commands.IDynamicActivator"/>. This is called sometime after the activator becomes active, not immeditaly so using e.g. <see cref="P:MacroFramework.Input.InputEvents.CurrentInputEvent"/> or <see cref="P:MacroFramework.Commands.TextCommands.CurrentTextCommand"/> will not work. Returns false if the operation was cancelled.
            </summary>
            <param name="timeout">Timeout in milliseconds after which the operation is cancelled. Set to 0 or less to ignore timeout</param>
        </member>
        <member name="T:MacroFramework.Commands.CommandActivatorGroup">
            <summary>
            A wrapper class for storing multiple <see cref="T:MacroFramework.Commands.IActivator"/> instances
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.CommandActivatorGroup.Activators">
            <summary>
            The list of all <see cref="T:MacroFramework.Commands.IActivator"/> instances owner by this class.
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivatorGroup.#ctor(MacroFramework.Commands.Command)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.CommandActivatorGroup"/> instance
            </summary>
            <param name="owner">The owner command class of this activator group</param>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivatorGroup.AddActivator(MacroFramework.Commands.IActivator)">
            <summary>
            Adds an activator to the group and sets the <see cref="P:MacroFramework.Commands.IActivator.Owner"/> of the activator
            </summary>
            <param name="activator">The activator to add</param>
        </member>
        <member name="M:MacroFramework.Commands.CommandActivatorGroup.IsActive(MacroFramework.Commands.CommandActivator@)">
            <summary>
            Returns true if any of the <see cref="T:MacroFramework.Commands.CommandActivator"/> instances is active
            </summary>
            <param name="activeActivator"></param>
            <returns></returns>
        </member>
        <member name="T:MacroFramework.Commands.DynamicActivator">
            <summary>
            Default implementtion of <see cref="T:MacroFramework.Commands.IDynamicActivator"/>
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.DynamicActivator.OnExecute">
            <summary>
            This delegate is called on <see cref="M:MacroFramework.Commands.DynamicActivator.Execute"/> before the <see cref="M:MacroFramework.Commands.IActivator.Execute"/> method
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.DynamicActivator.#ctor(MacroFramework.Commands.IActivator,System.Boolean)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.DynamicActivator"/> instance
            </summary>
            <param name="activator">The activator to use</param>
            <param name="removeAfterFirstExecute">Indicates whether the activator should be discarded after the first activation</param>
        </member>
        <member name="M:MacroFramework.Commands.DynamicActivator.#ctor(MacroFramework.Commands.IActivator,MacroFramework.Commands.DynamicActivator.RemoveAfterExecutionDelegate)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.DynamicActivator"/> instance
            </summary>
            <param name="activator">The activator to use</param>
            <param name="removeAfter">The delegate which indicates whether this <see cref="T:MacroFramework.Commands.DynamicActivator"/> should be removed after execution. If null <see cref="M:MacroFramework.Commands.DynamicActivator.RemoveAfterExecution"/> always returns true.</param>
        </member>
        <member name="T:MacroFramework.Commands.IActivator">
            <summary>
            Interface for all command activators
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.IActivator.IsActive">
            <summary>
            Returns true if activator is active
            </summary>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Commands.IActivator.Execute">
            <summary>
            Executes the action related to this activator
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IActivator.Owner">
            <summary>
            The owner of this activator or null if it is used independently
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IActivator.UpdateGroup">
            <summary>
            This activator will be updated with this update group when <see cref="M:MacroFramework.Commands.CommandContainer.UpdateActivators(System.Type)"/> is called
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.IDynamicActivator">
            <summary>
            An interface for adding <see cref="T:MacroFramework.Commands.IActivator"/> instance based actions during runtime
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IDynamicActivator.ID">
            <summary>
            Unique ID of the dynamic activator
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IDynamicActivator.IsCanceled">
            <summary>
            Indicates whether the operation was cancelled. If true, the activator is removed before the next execution.
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IDynamicActivator.Activator">
            <summary>
            The activator to use
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.IDynamicActivator.Execute">
            <summary>
            The action to execute whenever the <see cref="P:MacroFramework.Commands.IDynamicActivator.Activator"/> is active
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.IDynamicActivator.OnRemove">
            <summary>
            Executed on remove to perform cleanup
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.IDynamicActivator.RemoveAfterExecution">
            <summary>
            Indicates whether the activator should be removed from the list of active activators. If this returns true the activator is removed after execution.
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.ActivatorAttribute">
            <summary>
            The base class for all <see cref="T:MacroFramework.Commands.IActivator"/> attributes
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.ActivatorAttribute.GetCommandActivator(MacroFramework.Commands.Command,System.Reflection.MethodInfo)">
            <summary>
            Returns a corresponding <see cref="T:MacroFramework.Commands.IActivator"/> object
            </summary>
            <param name="owner">Command which owns <paramref name="assignedMethod"/></param>
            <param name="assignedMethod">The method to call</param>
            <returns></returns>
        </member>
        <member name="T:MacroFramework.Commands.BindActivatorAttribute">
            <summary>
            <see cref="T:System.Attribute"/> for easily creating a <see cref="T:MacroFramework.Commands.BindActivator"/>
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.BindActivatorAttribute.#ctor(MacroFramework.Commands.KKey[])">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.BindActivator"/> instance at the start of the application from this method
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:MacroFramework.Commands.BindActivatorAttribute.#ctor(MacroFramework.Commands.ActivationEventType,MacroFramework.Commands.KeyMatchType,MacroFramework.Commands.KeyPressOrder,MacroFramework.Commands.KKey[])">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.BindActivator"/> instance at the start of the application from this method
            </summary>
            <param name="activationType"><see cref="!:BindActivator.ActivationType"/></param>
            <param name="matchType"><see cref="!:BindActivator.MatchType"/></param>
            <param name="order"><see cref="!:BindActivator.Order"/></param>
            <param name="keys"><see cref="!:BindActivator.Keys"/></param>
        </member>
        <member name="T:MacroFramework.Commands.KeyActivatorAttribute">
            <summary>
            <see cref="T:System.Attribute"/> for easily creating a <see cref="T:MacroFramework.Commands.KeyActivator"/>. Attribute methods are parameterless, use <see cref="P:MacroFramework.Input.InputEvents.CurrentInputEvent"/> to get the current key event.
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.KeyActivatorAttribute.#ctor(MacroFramework.Commands.KKey)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.KeyActivator"/> instance at the start of the application from this method
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="T:MacroFramework.Commands.MethodInfoAttributeCont">
            <summary>
            A container object for method and their <see cref="T:MacroFramework.Commands.ActivatorAttribute"/>
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.TextActivatorAttribute">
            <summary>
            <see cref="T:System.Attribute"/> for easily creating a <see cref="T:MacroFramework.Commands.TextActivator"/>. Attribute methods are parameterless, use <see cref="P:MacroFramework.Commands.TextCommands.CurrentTextCommand"/> to get the current text command.
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.TextActivatorAttribute.MatchType">
            <summary>
            Determines whether to use the matcher string as a regex or a string match
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.TextActivatorAttribute.MatchType.StringMatch">
            <summary>
            Use string match
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.TextActivatorAttribute.MatchType.RegexPattern">
            <summary>
            Use regex match
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.TextActivatorAttribute.#ctor(System.String,MacroFramework.Commands.TextActivatorAttribute.MatchType)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.TextActivator"/> instance using either string or regex matching at the start of the application from this method
            </summary>
            <param name="match">The exact string match or regex pattern</param>
            <param name="type"><see cref="T:MacroFramework.Commands.TextActivatorAttribute.MatchType"/></param>
        </member>
        <member name="M:MacroFramework.Commands.TextActivatorAttribute.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.TextActivator"/> instance using string matching at the start of the application from this method
            </summary>
            <param name="match">The exact string match or regex pattern</param>
            <param name="type"><see cref="T:MacroFramework.Commands.TextActivatorAttribute.MatchType"/></param>
        </member>
        <member name="T:MacroFramework.Commands.TimerActivatorAttribute">
            <summary>
            <see cref="T:System.Attribute"/> for easily creating a <see cref="T:MacroFramework.Commands.TimerActivator"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MacroFramework.Commands.TimerActivatorAttribute.#ctor(System.Int32,MacroFramework.Commands.TimeUnit,System.Boolean)" -->
        <member name="T:MacroFramework.Commands.Command">
            <summary>
            Base class for all macro functionality
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.Command.CommandCallback">
            <summary>
            Callback for command actions
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.Command.commandActivators">
            <summary>
            Container for the set of <see cref="T:MacroFramework.Commands.CommandActivator"/> instances of this command
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.Command.CommandContext">
            <summary>
            The deleget bool used to determine whether a <see cref="T:MacroFramework.Commands.Command"/> instance is active
            </summary>
            <returns></returns>
        </member>
        <member name="F:MacroFramework.Commands.Command.DefaultContext">
            <summary>
            The default context used in all <see cref="T:MacroFramework.Commands.Command"/> instances. Returns true on default but can be changed.
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Command.#ctor">
            <summary>
            Creates a new <see cref="T:MacroFramework.Commands.Command"/> instance
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Command.InitializeActivators(MacroFramework.Commands.CommandActivatorGroup@)">
            <summary>
            Abstract method for initializing <see cref="T:MacroFramework.Commands.IActivator"/> and class functionality. Use this like you would use a constructor. CommandActivators array mustn't be null and has to have at least 1 activator.
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.Command.IsActive">
            <summary>
            Override this method to create custom contexts for your command. If false is returned, none of the activators in <see cref="P:MacroFramework.Commands.Command.CommandActivators"/> are active eiher and this <see cref="T:MacroFramework.Commands.Command"/> instance is effectively disabled for the moment.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Commands.Command.OnExecuteStart">
            <summary>
            Called before the execution of any <see cref="T:MacroFramework.Commands.IActivator"/> callback starts
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Command.OnExecutionComplete">
            <summary>
            Called after the execution of every <see cref="T:MacroFramework.Commands.IActivator"/> callback
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Command.OnStart">
            <summary>
            Called after <see cref="!:Macros.Start(Setup)"/>
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Command.OnUpdate">
            <summary>
            Called on every iteration of <see cref="P:MacroFramework.Macros.OnMainLoop"/> before any <see cref="T:MacroFramework.Commands.IActivator"/> updates. Differs only in exectuion order with a <see cref="T:MacroFramework.Commands.TimerActivator"/> with a 0 as a parameter.
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Command.OnClose">
            <summary>
            Called after <see cref="M:MacroFramework.Macros.Stop"/>
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Command.OnPause">
            <summary>
            Called when the framrwork is paused
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Command.OnResume">
            <summary>
            Called when the framrwork is unpaused
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.Command.OnTextCommand(System.String,System.Boolean)">
            <summary>
            This method is called whenever a text command is executed
            </summary>
            <param name="command">The text command which was executed</param>
            <param name="commandWasAccepted">True if any <see cref="T:MacroFramework.Commands.TextActivator"/> instance executed the text command. False if command was not executed.</param>
        </member>
        <member name="M:MacroFramework.Commands.Command.Keys(MacroFramework.Commands.KKey[])">
            <summary>
            Nicer syntax for creating array of <see cref="T:MacroFramework.VKey"/> elements
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="T:MacroFramework.Commands.CommandContainer">
            <summary>
            A static class for handling all active <see cref="T:MacroFramework.Commands.Command"/> instances
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.CommandContainer.Commands">
            <summary>
            List of active commands. You should not modify this collection.
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.CommandContainer.UpdateActivators(System.Type[])">
            <summary>
            Executes all activatos of certain type. This may call multiple activators from a single command instance.
            </summary>
            <param name="types">The list of types to update which implement <see cref="T:MacroFramework.Commands.IActivator"/>"/></param>
        </member>
        <member name="M:MacroFramework.Commands.CommandContainer.UpdateActivators``1">
            <summary>
            Executes all activatos of certain type. This may call multiple activators from a single command instance.
            </summary>
            <typeparam name="T">The type to update which implement <see cref="T:MacroFramework.Commands.IActivator"/></typeparam>
        </member>
        <member name="M:MacroFramework.Commands.CommandContainer.AddCommand(MacroFramework.Commands.Command)">
            <summary>
            Adds a command to the active command pool
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:MacroFramework.Commands.CommandContainer.AddDynamicActivator(MacroFramework.Commands.IDynamicActivator)">
            <summary>
            Can be used to add <see cref="T:MacroFramework.Commands.IActivator"/> (wrapped inside <see cref="T:MacroFramework.Commands.IDynamicActivator"/>) instances to the framework during runtime. Useful for e.g. events that should run only once.
            </summary>
            <param name="act">The dynamic activator to add</param>
        </member>
        <member name="M:MacroFramework.Commands.CommandContainer.ForEveryCommand(MacroFramework.Commands.CommandContainer.CommandIteratorDelegate,System.String)">
            <summary>
            Executes some action for every command in a try clause
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.CommandContainer.RemoveDynamicActivator(System.UInt32)">
            <summary>
            Removes a <see cref="T:MacroFramework.Commands.IDynamicActivator"/> instance from the active list. Returns true if the element existed and was removed.
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.ActivationEventType">
            <summary>
            Filters activations based on whether the current event was a keydown or a keyup event
            </summary>
            <remarks>You should be fine with <see cref="F:MacroFramework.Commands.ActivationEventType.OnFirstRelease"/> most of the time.</remarks>
        </member>
        <member name="F:MacroFramework.Commands.ActivationEventType.OnFirstRelease">
            <summary>
            Only activates a keybind on the first key release after a keypress. E.g. if you press [A, B, C] and release the keys in order, only the binds with [A, B, C] will be activated.
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.ActivationEventType.OnAnyRelease">
            <summary>
            Activates a keybind on any key up event. E.g. if you press [A, B, C] and release the keys in order, the binds for [A, B, C], [B, C] and [C] will be activated.
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.ActivationEventType.OnPress">
            <summary>
            Activates a keybind on any key down event. E.g. if you press and hold [A, B, C] in order, the binds with [A], [A, B] and [A, B, C] will be activated.
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.ActivationEventType.Any">
            <summary>
            ACtivates a keybind on any key event. Use with caution as binds with this option are activated twice, once on key down and once again on key up events. Use <see cref="P:MacroFramework.Input.InputEvents.CurrentInputEvent"/> to determine whether the current event is a key down or up event.
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.KeyMatchType">
            <summary>
            Determines how keypress combinations are checked for matches
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.KeyMatchType.ExactKeyMatch">
            <summary>
            Match occurs if all of the selected keys and no other keys are pressed
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.KeyMatchType.PartialMatch">
            <summary>
            Match occurs if all of the selected keys are pressed
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.KeyPressOrder">
            <summary>
            Determines whether keys should be pressed in the give parameter order
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.KeyPressOrder.Ordered">
            <summary>
            The <see cref="T:MacroFramework.Commands.BindActivator"/> will only activate if <see cref="!:BindActivator.Keys"/> are pressed in order
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.KeyPressOrder.Unordered">
            <summary>
            The <see cref="T:MacroFramework.Commands.BindActivator"/> will activate if <see cref="!:BindActivator.Keys"/> are pressed in any order
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.TimeUnit">
            <summary>
            Unit of time
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.IInputEvent">
            <summary>
            Interface for representing device input
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IInputEvent.Key">
            <summary>
            The corresponding key
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IInputEvent.State">
            <summary>
            The state of the key
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IInputEvent.Injected">
            <summary>
            Specifies whether the event was emitted by a process
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IInputEvent.InjectedLower">
            <summary>
            Specifies if the key was emitted by a lower integrity level process
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IInputEvent.ExtraInfo">
            <summary>
            Extra information given by the event source
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IInputEvent.ReceiveTimestamp">
            <summary>
            The time in milliseconds when it was received. See <see cref="T:MacroFramework.Tools.Timer"/>.
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IInputEvent.Type">
            <summary>
            The type of the input event
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IInputEvent.ActivationType">
            <summary>
            The type of the activation event
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.IInputEvent.Unique">
            <summary>
            Determines if the event is unique. False in the case of a key being held down.
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.IInputEvent.GetCopy">
            <summary>
            Returns a new copy of the event
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.KKey">
            <summary>An enhanced list of Virtual Keys.</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Custom">
            <summary>Flag for custom defined keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Modifier">
            <summary>Flag for modifier keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Mouse">
            <summary>Flag for mouse keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Numpad">
            <summary>Flag for numpad keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Scroll">
            <summary>Flag for scroll keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Number">
            <summary>Flag for number keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Extended">
            <summary>Flag for extended keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Media">
            <summary>Flag for media keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Char">
            <summary>Flag for keys that produce visible characters</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Stateless">
            <summary>Flag for stateless keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.F_Toggle">
            <summary>Flag for toggle keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Shift">
            <summary>Flag for shift keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Ctrl">
            <summary>Flag for ctrl keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Win">
            <summary>Flag for win keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Alt">
            <summary>Flag for alt keys</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.M_FlagMask">
            <summary>Mask for the flag bits</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.M_KeyMask">
            <summary>Mask for the Virtual Key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Undefined">
            <summary>Key is undefined</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.MouseLeft">
            <summary>Left mouse button</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.MouseRight">
            <summary>Right mouse button</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.MouseMiddle">
            <summary>Middle mouse button</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.MouseXButton1">
            <summary>Extra mouse button 1</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.MouseXButton2">
            <summary>Extra mouse button 2</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D0">
            <summary>Digit 0</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D1">
            <summary>Digit 1</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D2">
            <summary>Digit 2</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D3">
            <summary>Digit 3</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D4">
            <summary>Digit 4</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D5">
            <summary>Digit 5</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D6">
            <summary>Digit 6</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D7">
            <summary>Digit 7</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D8">
            <summary>Digit 8</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.D9">
            <summary>Digit 9</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Left">
            <summary>Left arrow key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Right">
            <summary>Right arrow key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Up">
            <summary>Up arrow key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Down">
            <summary>Down arrow key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.LShift">
            <summary>Left shift key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.RShift">
            <summary>Right shift key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.LCtrl">
            <summary>Left control key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.RCtrl">
            <summary>Right control key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.LAlt">
            <summary>Left alt key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.RAlt">
            <summary>Right alt key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.LWin">
            <summary>Left win key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.RWin">
            <summary>Right win key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.App">
            <summary>Context menu key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Context">
            <summary>Context menu key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.PrintScrn">
            <summary>Print screen key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.BrowserBack">
            <summary>The general back key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.BrowserForward">
            <summary>The general forward key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.MediaPlay">
            <summary>Media play pause key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Umlaut">
            <summary>The ¨ key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Apostrophe">
            <summary>The ' key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Ö">
            <summary>The Ö key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.tilde">
            <summary>The ´ key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Section">
            <summary>The § key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Å">
            <summary>The Å key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Ä">
            <summary>The Ä key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.Less">
            <summary>The &lt; key</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.WheelLeft">
            <summary>Mouse wheel left</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.WheelRight">
            <summary>Mouse wheel right</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.WheelUp">
            <summary>Mouse wheel up</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.WheelDown">
            <summary>Mouse wheel down</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.MouseMove">
            <summary>Mouse movement</summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.GeneralBindKey">
            <summary>
            The <see cref="F:MacroFramework.MacroSettings.GeneralBindKey"/> key will always be transformed to this key
            </summary>
        </member>
        <member name="F:MacroFramework.Commands.KKey.None">
            <summary>
            Does not represent any key
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.TextCommandCreator">
            <summary>
            Class for creating text commands from key events
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.TextCommandCreator.BuildTextCommand">
            <summary>
            Returns the current active text command which is currently being typed in.
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.TextCommandCreator.IsCommandMode">
            <summary>
            Returns true if the text command mode is currently active
            </summary>
        </member>
        <member name="T:MacroFramework.Commands.TextCommands">
            <summary>
            The static class which handles the execution of text commands
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.TextCommands.CurrentTextCommand">
            <summary>
            Returns the current text command which is being executed or null if none are being executed at this moment
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.TextCommands.CommandWasAccepted">
            <summary>
            True if the command was accepted by some <see cref="T:MacroFramework.Commands.TextActivator"/> instance. Remains the same value until the next <see cref="!:Execute(string)"/>
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.TextCommands.OnTextCommandModeStart">
            <summary>
            Called whenever the text command mode is activated
            </summary>
        </member>
        <member name="P:MacroFramework.Commands.TextCommands.OnTextCommandModeEnd">
            <summary>
            Called whenever the text command mode is deactivated
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.TextCommands.Execute(System.String,System.Boolean)">
            <summary>
            Executes or queues any given string command and notifies all <see cref="T:MacroFramework.Commands.TextActivator"/> instances
            </summary>
            <param name="command">The command to execute</param>
            <param name="runImmediately">If true the command is executed immediately. This can cause infinite loops if a <see cref="T:MacroFramework.Commands.TextActivator"/> calls this method. Use with caution. If false the text command is executed at the next main update loop.</param>
        </member>
        <member name="M:MacroFramework.Commands.TextCommands.ExecuteTextCommandQueue">
            <summary>
            Executes the queued up string commands
            </summary>
        </member>
        <member name="M:MacroFramework.Commands.TextCommands.IsMatchForCommand(MacroFramework.Tools.RegexWrapper)">
            <summary>
            Returns true if the command was accepted by the matcher.
            </summary>
            <param name="matcher">A regex wrapper object</param>
            <returns></returns>
        </member>
        <member name="T:MacroFramework.ILogger">
            <summary>
            Interface for log messages
            </summary>
        </member>
        <member name="T:MacroFramework.Input.EnhancedKey">
            <summary>Extension methods for the enhanced Key enum</summary>
        </member>
        <member name="P:MacroFramework.Input.EnhancedKey.KeyMap">
            <summary>Map virtual key codes to the Key enum</summary>
        </member>
        <member name="P:MacroFramework.Input.EnhancedKey.KeyExtendedMap">
            <summary>Map extended versions of virtual key codes to the Key enum</summary>
        </member>
        <member name="P:MacroFramework.Input.EnhancedKey.StringToKey">
            <summary>Map strings to the Key enum</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.HasAny(MacroFramework.Commands.KKey,MacroFramework.Commands.KKey)">
            <summary>Check if key has any of the flags given</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.HasAll(MacroFramework.Commands.KKey,MacroFramework.Commands.KKey)">
            <summary>Check if key has all of the flags given</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsKey(MacroFramework.Commands.KKey)">
            <summary>Check if the Key value is a key instead of a flag etc.</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsFlag(MacroFramework.Commands.KKey)">
            <summary>Check if the Key value is a flag</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsMask(MacroFramework.Commands.KKey)">
            <summary>Check if the Key value is a mask</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsCustom(MacroFramework.Commands.KKey)">
            <summary>Check if the Key value is a custom entry</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsModifier(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a modifier</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsMouse(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a mouse key</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsNumpad(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a numpad key</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsScroll(MacroFramework.Commands.KKey)">
            <summary>Check if the key represents a scroll event</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsMouseMove(MacroFramework.Commands.KKey)">
            <summary>Check if the Key value represents mouse movement</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsNumber(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a number</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsExtended(MacroFramework.Commands.KKey)">
            <summary>Check if the key is has the extended property</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsMedia(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a media key</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsChar(MacroFramework.Commands.KKey)">
            <summary>Check if the key produces a character when typed</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsStateless(MacroFramework.Commands.KKey)">
            <summary>Check if the key is stateless. Stateless keys have no up event.</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsToggle(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a toggleable key</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsKeyboard(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a keyboard key instead of a mouse or a custom key</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsModifierFlag(MacroFramework.Commands.KKey)">
            <summary>Check if the Key value is a modifier flag</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsShift(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a left or right shift key</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsCtrl(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a left or right control key</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsWin(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a left or right win key</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsAlt(MacroFramework.Commands.KKey)">
            <summary>Check if the key is a left or right alt key</summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.AsVirtualKey(MacroFramework.Commands.KKey)">
            <summary>Get the <see cref="T:MacroFramework.VKey"/> equivalent of this <see cref="T:MacroFramework.Commands.KKey"/></summary>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.AsCustom(MacroFramework.VKey,System.Boolean)">
            <summary>Get the <see cref="T:MacroFramework.Commands.KKey"/> equivalent of this <see cref="T:MacroFramework.VKey"/>. If an extended key is not found, a non-extended version is returned if possible.</summary>
            <param name="key">The <see cref="T:MacroFramework.VKey"/> to cast into a <see cref="T:MacroFramework.Input.ScanCode"/></param>
            <param name="extended">Set true to prioritize the extended version of the key (Example: Enter vs NumpadEnter). Returns non-extended version as fallback if not found and vice versa.</param>
        </member>
        <member name="M:MacroFramework.Input.EnhancedKey.IsExtended(MacroFramework.Input.ScanCode)">
            <summary>Check if the <see cref="T:MacroFramework.Input.ScanCode"/> is an extended key</summary>
        </member>
        <member name="T:MacroFramework.Input.InputEvents">
            <summary>
            Static clas used to handle the keyevents captured by the <see cref="T:MacroFramework.Input.InputHook"/>
            </summary>
        </member>
        <member name="T:MacroFramework.Input.InputEvents.InputCallbackFunc">
            <summary>
            A delegate for receiving keyevents from the framework
            </summary>
        </member>
        <member name="P:MacroFramework.Input.InputEvents.InputCallback">
            <summary>
            This delegate is invoked at every keypress, before it is registered by the <see cref="T:MacroFramework.Input.KeyStates"/>. Return true to intercept key from other applications and the <see cref="N:MacroFramework"/> itself. This delegate is blocking and slow execution will cause OS wide latency for key events.
            </summary>
        </member>
        <member name="P:MacroFramework.Input.InputEvents.BlockedKeys">
            <summary>
            Use this block keys from other applications
            </summary>
        </member>
        <member name="P:MacroFramework.Input.InputEvents.CurrentInputEvent">
            <summary>
            Returns the current KeyEvent. This can be used by Command classes to access the current KeyEvent.
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputEvents.RegisterHookKeyEvent(MacroFramework.Commands.IInputEvent)">
            <summary>
            You can use this method to send virtual input within the application.
            </summary>
            <param name="k"></param>
            <returns>True if key should be intercepted</returns>
        </member>
        <member name="T:MacroFramework.Input.InputHook">
            <summary>
            Static class for receiving low level input from keyboard or mouse
            </summary>
        </member>
        <member name="T:MacroFramework.Input.InputHook.MessageProc">
            <summary>
            Delegate for receiving low level input
            </summary>
        </member>
        <member name="F:MacroFramework.Input.InputHook.KEYBOARD_HOOK_ID">
            <summary>
            Windows hook IDs
            </summary>
        </member>
        <member name="F:MacroFramework.Input.InputHook.MOUSE_HOOK_ID">
            <summary>
            Windows hook IDs
            </summary>
        </member>
        <member name="P:MacroFramework.Input.InputHook.KeyboardHookRunning">
            <summary>
            Returns true if the keyboard hook is running
            </summary>
        </member>
        <member name="P:MacroFramework.Input.InputHook.MouseHookRunning">
            <summary>
            Returns true if the mouse hook is running
            </summary>
        </member>
        <member name="F:MacroFramework.Input.InputHook.keyboardProc">
            <summary>
            Keyboard callback delegate
            </summary>
        </member>
        <member name="F:MacroFramework.Input.InputHook.mouseProc">
            <summary>
            Mouse callback delegate
            </summary>
        </member>
        <member name="P:MacroFramework.Input.InputHook.BlockCode">
            <summary>
            The <see cref="T:System.IntPtr"/> to return to intercept a keyevent
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputHook.SetWindowsHookEx(System.Int32,MacroFramework.Input.InputHook.MessageProc,System.IntPtr,System.Int32)">
            <summary>
            Initialize a low level hook
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputHook.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
            Dispose of a low level hook
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputHook.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Call the next hook in a chain
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputHook.StartKeyboardHook">
            <summary>
            Start hooking keyboard
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputHook.StopKeyboardHook">
            <summary>
            Stop hooking keyboard
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputHook.StartMouseHook">
            <summary>
            Start hooking mouse
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputHook.StopMouseHook">
            <summary>
            Stop hooking mouse
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputHook.StartHooks">
            <summary>
            Starts both hooks
            </summary>
        </member>
        <member name="M:MacroFramework.Input.InputHook.StopHooks">
            <summary>
            Stops both hooks
            </summary>
        </member>
        <member name="T:MacroFramework.Input.KeyStates">
            <summary>
            The static class handling the key states
            </summary>
        </member>
        <member name="P:MacroFramework.Input.KeyStates.AbsoluteKeystates">
            <summary>
            Returns the dictionary containig VKeytates. This dictionary should not be used for keybinds.
            </summary>
        </member>
        <member name="T:MacroFramework.Input.KeyStates.State">
            <summary>
            How many keys are held down at any given moment
            </summary>
        </member>
        <member name="P:MacroFramework.Input.KeyStates.LastKeyEventTime">
            <summary>
            The timestamp for the last keyevent
            </summary>
        </member>
        <member name="M:MacroFramework.Input.KeyStates.TimeSinceLastKeyPress">
            <summary>
            Time since last keypress in milliseconds
            </summary>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Input.KeyStates.AddAbsoluteEvent(MacroFramework.Commands.IInputEvent)">
            <summary>
            This method is used to keep track on which VKey are pressed down. Returns true if the keyevent is unique.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MacroFramework.Input.KeyStates.IsUniqueEvent(MacroFramework.Commands.KKey,System.Boolean)">
            <summary>
            Whether or not this is a unique keyevent
            </summary>
            <param name="k"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Input.KeyStates.SafeReset">
            <summary>
            Temporary solution for possible state mismatch due to lag/exceptions
            </summary>
        </member>
        <member name="M:MacroFramework.Input.KeyStates.IsBindActive(MacroFramework.Commands.Bind)">
            <summary>
            Returns true if the current keystate matches the given parameters
            </summary>
            <param name="bind">The bind to check</param>
        </member>
        <member name="M:MacroFramework.Input.KeyStates.GetCurrentActivationEventType(System.Boolean)">
            <summary>
            Returns the current activation type parameter
            </summary>
            <returns></returns>
        </member>
        <member name="T:MacroFramework.Input.InputEventType">
            <summary>
            The type of the input event
            </summary>
        </member>
        <member name="T:MacroFramework.Input.KeyEvent">
            <summary>
            Contains information about the current keyevent
            </summary>
        </member>
        <member name="P:MacroFramework.Input.KeyEvent.Key">
            <summary>
            The corresponding key
            </summary>
        </member>
        <member name="P:MacroFramework.Input.KeyEvent.State">
            <summary>
            The key up/down state of the key
            </summary>
        </member>
        <member name="P:MacroFramework.Input.KeyEvent.Unique">
            <summary>
            True in regular press and release situations. False when holding down a key.
            </summary>
        </member>
        <member name="P:MacroFramework.Input.KeyEvent.ActivationType">
            <summary>
            The activation type of this keyevent
            </summary>
        </member>
        <member name="P:MacroFramework.Input.KeyEvent.Extended">
            <summary>
            Specifies if the key has the extended property
            </summary>
        </member>
        <member name="M:MacroFramework.Input.KeyEvent.#ctor(System.IntPtr,MacroFramework.Input.KBDLLHOOKSTRUCT)">
            <summary>
            Creates a new <see cref="T:MacroFramework.Input.KeyEvent"/> instance from a low level input event
            </summary>
        </member>
        <member name="P:MacroFramework.Input.MouseEvent.Point">
            <summary>
            The screen coordinates in which the event occurred
            </summary>
        </member>
        <member name="M:MacroFramework.Input.MouseEvent.ParaseMouseEvent(MacroFramework.Input.WindowsMessage,System.Int32,MacroFramework.Commands.KKey@,System.Boolean@)">
            <summary>Retrieve the Key equivalent from a <see cref="!:WM"/> message</summary>
        </member>
        <member name="T:MacroFramework.Input.ScanCode">
            <summary>Enum of key scan codes.</summary>
        </member>
        <member name="T:MacroFramework.Input.WindowsMessage">
            <summary>
            Enums of all Windows messages
            </summary>
        </member>
        <member name="T:MacroFramework.VKey">
            <summary>Enum of virtual key codes.</summary>
        </member>
        <member name="F:MacroFramework.VKey.LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.MBUTTON">
            <summary>
            Middle mouse button (three-button mouse)
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.XBUTTON1">
            <summary>
            Windows 2000/XP: X1 mouse button
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.XBUTTON2">
            <summary>
            Windows 2000/XP: X2 mouse button
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.UNDEFINED">
            <summary>This key is undefined</summary>
        </member>
        <member name="F:MacroFramework.VKey.BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.KANA">
            <summary>
            Input Method Editor (IME) Kana mode
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.T">
            <summary>
            T key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.LWIN">
            <summary>
            Left Windows key (Microsoft Natural keyboard)
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.RWIN">
            <summary>
            Right Windows key (Natural keyboard)
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.APPS">
            <summary>
            Applications key (Natural keyboard)
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F17">
            <summary>
            F17 key  
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F18">
            <summary>
            F18 key  
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F19">
            <summary>
            F19 key  
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F20">
            <summary>
            F20 key  
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F21">
            <summary>
            F21 key  
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F22">
            <summary>
            F22 key, (PPC only) Key used to lock device.
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F23">
            <summary>
            F23 key  
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.F24">
            <summary>
            F24 key  
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.LSHIFT">
            <summary>
            Left SHIFT key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.RSHIFT">
            <summary>
            Right SHIFT key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.LCONTROL">
            <summary>
            Left CONTROL key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.RCONTROL">
            <summary>
            Right CONTROL key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.LMENU">
            <summary>
            Left MENU key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.RMENU">
            <summary>
            Right MENU key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.BROWSER_BACK">
            <summary>
            Windows 2000/XP: Browser Back key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.BROWSER_FORWARD">
            <summary>
            Windows 2000/XP: Browser Forward key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.BROWSER_REFRESH">
            <summary>
            Windows 2000/XP: Browser Refresh key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.BROWSER_STOP">
            <summary>
            Windows 2000/XP: Browser Stop key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.BROWSER_SEARCH">
            <summary>
            Windows 2000/XP: Browser Search key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.BROWSER_FAVORITES">
            <summary>
            Windows 2000/XP: Browser Favorites key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.BROWSER_HOME">
            <summary>
            Windows 2000/XP: Browser Start and Home key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.VOLUME_MUTE">
            <summary>
            Windows 2000/XP: Volume Mute key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.VOLUME_DOWN">
            <summary>
            Windows 2000/XP: Volume Down key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.VOLUME_UP">
            <summary>
            Windows 2000/XP: Volume Up key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.MEDIA_NEXT_TRACK">
            <summary>
            Windows 2000/XP: Next Track key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.MEDIA_PREV_TRACK">
            <summary>
            Windows 2000/XP: Previous Track key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.MEDIA_STOP">
            <summary>
            Windows 2000/XP: Stop Media key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.MEDIA_PLAY_PAUSE">
            <summary>
            Windows 2000/XP: Play/Pause Media key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.LAUNCH_MAIL">
            <summary>
            Windows 2000/XP: Start Mail key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.LAUNCH_MEDIA_SELECT">
            <summary>
            Windows 2000/XP: Select Media key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.LAUNCH_APP1">
            <summary>
            Windows 2000/XP: Start Application 1 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.LAUNCH_APP2">
            <summary>
            Windows 2000/XP: Start Application 2 key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_PLUS">
            <summary>
            Windows 2000/XP: For any country/region, the '+' key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_COMMA">
            <summary>
            Windows 2000/XP: For any country/region, the ',' key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_MINUS">
            <summary>
            Windows 2000/XP: For any country/region, the '-' key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_PERIOD">
            <summary>
            Windows 2000/XP: For any country/region, the '.' key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_102">
            <summary>
            Windows 2000/XP: Either the angle bracket key or the backslash key on the RT 102-key keyboard
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.PROCESSKEY">
            <summary>
            Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.PACKET">
            <summary>
            Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes.
            The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information,
            see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:MacroFramework.VKey.ATTN">
            <summary>Attn key</summary>
        </member>
        <member name="F:MacroFramework.VKey.CRSEL">
            <summary>CrSel key</summary>
        </member>
        <member name="F:MacroFramework.VKey.EXSEL">
            <summary>ExSel key</summary>
        </member>
        <member name="F:MacroFramework.VKey.EREOF">
            <summary>Erase EOF key</summary>
        </member>
        <member name="F:MacroFramework.VKey.PLAY">
            <summary>Play key</summary>
        </member>
        <member name="F:MacroFramework.VKey.ZOOM">
            <summary>Zoom key</summary>
        </member>
        <member name="F:MacroFramework.VKey.NONAME">
            <summary>Reserved</summary>
        </member>
        <member name="F:MacroFramework.VKey.PA1">
            <summary>PA1 key</summary>
        </member>
        <member name="F:MacroFramework.VKey.OEM_CLEAR">
            <summary>Clear key</summary>
        </member>
        <member name="T:MacroFramework.Macros">
            <summary>
            Static class used for starting the application with settings
            </summary>
        </member>
        <member name="T:MacroFramework.Macros.RunState">
            <summary>
            The different run states the application can be in
            </summary>
        </member>
        <member name="F:MacroFramework.Macros.RunState.NotRunning">
            <summary>
            The application is not running
            </summary>
        </member>
        <member name="F:MacroFramework.Macros.RunState.Running">
            <summary>
            The application is running in a normal state
            </summary>
        </member>
        <member name="F:MacroFramework.Macros.RunState.RunningInLimitedMode">
            <summary>
            The application is running in limited mode in which only certain <see cref="T:MacroFramework.Commands.IActivator"/> are updated. Input is disabled.
            </summary>
        </member>
        <member name="F:MacroFramework.Macros.RunState.Paused">
            <summary>
            The application is paused and no <see cref="T:MacroFramework.Commands.Command"/> or <see cref="T:MacroFramework.Commands.IActivator"/> instances are automatically updated
            </summary>
        </member>
        <member name="P:MacroFramework.Macros.State">
            <summary>
            The current state of the application
            </summary>
        </member>
        <member name="T:MacroFramework.Macros.VoidDelegate">
            <summary>
            Void callback
            </summary>
        </member>
        <member name="T:MacroFramework.Macros.ContinueDelegate">
            <summary>
            Delegate used for continuing the app
            </summary>
        </member>
        <member name="P:MacroFramework.Macros.OnMainLoop">
            <summary>
            The delegate which is called at the start of every main loop iteration
            </summary>
        </member>
        <member name="T:MacroFramework.Macros.ExceptionCallback">
            <summary>
            Callback used to catch exceptions globally
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">The exception which was handled</param>
            <param name="type">The type of exception</param>
            <param name="isTerminating">Indicates whether the common language runtime is terminating</param>
        </member>
        <member name="P:MacroFramework.Macros.OnException">
            <summary>
            Called on any exception which was not caught by a trycatch clause
            </summary>
        </member>
        <member name="M:MacroFramework.Macros.Start(MacroFramework.Setup,System.Boolean,MacroFramework.Macros.VoidDelegate)">
            <summary>
            Starts the synchronous MacrosFramework application. Should be called from a method with an <see cref="T:System.STAThreadAttribute"/>.
            </summary>
            <param name="setup">The setup options</param>
            <param name="runInLimitedMode">If true the application is set to <see cref="F:MacroFramework.Macros.RunState.RunningInLimitedMode"/></param>
            <param name="afterStart">Called immediately after start. You can use this delegate to start your own application on the same thread as the <see cref="P:MacroFramework.Macros.MainThread"/>.</param>
        </member>
        <member name="M:MacroFramework.Macros.Stop">
            <summary>
            Stops the MacroFramework application
            </summary>
        </member>
        <member name="T:MacroFramework.Macros.ExceptionType">
            <summary>
            Enum containing the different types of exceptions which can be caught
            </summary>
        </member>
        <member name="F:MacroFramework.Macros.ExceptionType.ThreadException">
            <summary>
            This exception was caught by the <see cref="E:System.Windows.Forms.Application.ThreadException"/> handler
            </summary>
        </member>
        <member name="F:MacroFramework.Macros.ExceptionType.UnhandledException">
            <summary>
            This exception was caught by the <see cref="!:AppDomain.CurrentDomain.UnhandledException"/> handler
            </summary>
        </member>
        <member name="F:MacroFramework.Macros.ExceptionType.UnobservedTaskException">
            <summary>
            This exception was caught by the <see cref="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException"/> handler
            </summary>
        </member>
        <member name="M:MacroFramework.Macros.SetRunState(MacroFramework.Macros.RunState,MacroFramework.Macros.ContinueDelegate)">
            <summary>
            Set the run state of the application
            </summary>
            <param name="state">The state to set the application in</param>
            <param name="continueDelegate">If you set the application to limited run mode or paused mode this delegate can be used to return to <see cref="F:MacroFramework.Macros.RunState.Running"/> state after the delegate returns true.></param>
        </member>
        <member name="M:MacroFramework.Macros.Resume">
            <summary>
            Resumes the application
            </summary>
        </member>
        <member name="M:MacroFramework.Macros.Pause">
            <summary>
            Pauses the application. Input hooks are disabled and all events except the <see cref="P:MacroFramework.Macros.OnMainLoop"/> are disabled.
            </summary>
        </member>
        <member name="M:MacroFramework.Macros.PauseUntil(MacroFramework.Macros.ContinueDelegate)">
            <summary>
            Pauses the application until a certain condition becomes true
            </summary>
            <param name="continueDelegate">Continuation condition delegate</param>
        </member>
        <member name="M:MacroFramework.Macros.SetLimitedMode">
            <summary>
            Pauses the application. Input hooks are disabled and all events except the <see cref="P:MacroFramework.Macros.OnMainLoop"/> are disabled.
            </summary>
        </member>
        <member name="M:MacroFramework.Macros.SetLimitedModeUntil(MacroFramework.Macros.ContinueDelegate)">
            <summary>
            Pauses the application until a certain condition becomes true
            </summary>
            <param name="continueDelegate">Continuation condition delegate</param>
        </member>
        <member name="T:MacroFramework.MacroSettings">
            <summary>
            A settings class used to configure the framework
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.UseGlobalExceptionHandler">
            <summary>
            Whether to use a global exception handler to catch uncaught exceptions. This can catch exception withing async Tasks.
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.HandleInjectedInputEvents">
            <summary>
            If true injected events (e.g. virtual input events sent by processes) will be handled by the application. Use with care as handling injected events can cause unwanted behaviour.
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.CommandKey">
            <summary>
            The dedicated key on the keyboard which activates the text command mode.
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.GeneralBindKey">
            <summary>
            A dedicated bind key which is always intercepted and tranformed into <see cref="!:VKey.GENERAL_BIND_KEY"/>
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.CommandActivateKey">
            <summary>
            The dedicated key on the keyboard which executes the current command mode
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.ListenerEnableKey">
            <summary>
            Not yet implemented. The dedicated key which enables the framework.
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.ListenerDisableKey">
            <summary>
            Not yet implemented. The dedicated key which disables the <see cref="!:InputHook"/>
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.TextCommandTimeout">
            <summary>
            The timeout after the last keypress after which command mode is canceled
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.AllowKeyboardHook">
            <summary>
            Whether to allow a certain device hook
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.AllowMouseHook">
            <summary>
            Whether to allow a certain device hook
            </summary>
        </member>
        <member name="F:MacroFramework.MacroSettings.MainLoopTimestep">
            <summary>
            The delay in milliseconds between every iteration of the main loop
            </summary>
        </member>
        <member name="T:MacroFramework.Setup">
            <summary>
            Inherit this class in your project to finish the setup process
            </summary>
        </member>
        <member name="P:MacroFramework.Setup.Instance">
            <summary>
            The current singleton setup instance
            </summary>
        </member>
        <member name="P:MacroFramework.Setup.CommandAssembly">
            <summary>
            The assembly in which your custom <see cref="T:MacroFramework.Commands.Command"/> classes reside in (can be null).
            </summary>
        </member>
        <member name="P:MacroFramework.Setup.Settings">
            <summary>
            The settings you wish to use
            </summary>
        </member>
        <member name="M:MacroFramework.Setup.#ctor">
            <summary>
            Creates a new <see cref="T:MacroFramework.Setup"/> instance
            </summary>
        </member>
        <member name="M:MacroFramework.Setup.GetSettings">
            <summary>
            Set the <see cref="T:MacroFramework.MacroSettings"/> to fit your needs here
            </summary>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Setup.GetMainAssembly">
            <summary>
            Return the <see cref="T:System.Reflection.Assembly"/> in which your <see cref="T:MacroFramework.Commands.Command"/> instances reside in (most likely <see cref="M:System.Reflection.Assembly.GetExecutingAssembly"/>). This allows automatically enabling your <see cref="T:MacroFramework.Commands.Command"/>. Return null if you don't wish to use this feature. Add commands manually either using <see cref="M:MacroFramework.Commands.CommandContainer.AddCommand(MacroFramework.Commands.Command)"/> or define a list of them with <see cref="M:MacroFramework.Setup.GetActiveCommands"/>/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Setup.GetActiveCommands">
            <summary>
            Initialize active commands here. Return null if you defined the main assembly in <see cref="M:MacroFramework.Setup.GetMainAssembly"/> or if you wish to use <see cref="M:MacroFramework.Commands.CommandContainer.AddCommand(MacroFramework.Commands.Command)"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MacroFramework.Setup.GetLogger">
            <summary>
            Use a custom <see cref="T:MacroFramework.ILogger"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:MacroFramework.Tools.RegexWrapper">
            <summary>
            A simple wrapper class for Regexes. You can implicitly create a RegexWrapper instance from a string or a Regex.
            </summary>
        </member>
        <member name="M:MacroFramework.Tools.RegexWrapper.Wrap(MacroFramework.Tools.RegexWrapper[])">
            <summary>
            Syntactit sugar for array creation
            </summary>
            <param name="wrappers"></param>
        </member>
        <member name="T:MacroFramework.Tools.Timer">
            <summary>
            Provides simple timer class
            </summary>
        </member>
        <member name="P:MacroFramework.Tools.Timer.Milliseconds">
            <summary>
            System time in milliseconds
            </summary>
        </member>
        <member name="M:MacroFramework.Tools.Timer.PassedFrom(System.Int64)">
            <summary>
            Elapes system time in milliseconds
            </summary>
            <param name="timestampMillis">Elapsed millis from</param>
            <returns></returns>
        </member>
    </members>
</doc>
